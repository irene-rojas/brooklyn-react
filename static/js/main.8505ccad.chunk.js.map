{"version":3,"sources":["images/b99_logo.png","Person/images/amy.jpg","Person/images/charles.jpg","Person/images/gina.jpg","Person/images/holt.jpg","Person/images/jake.jpg","Person/images/rosa.jpg","Person/images/terry.jpg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","person","AMY","CHARLES","GINA","HOLT","JAKE","ROSA","TERRY","Reward","props","react_default","a","createElement","className","src","targetName","alt","names","App","state","targetNameDashes","guessRemain","lettersGuessed","resetGame","Math","floor","random","length","console","log","_this","setState","Array","fill","join","onKeyUp","event","preventDefault","letter","key","toUpperCase","prevState","modifiedNameDashes","String","i","substr","concat","Object","toConsumableArray","this","logo","id","value","onClick","Person_Person","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8505ccad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/b99_logo.9f1758bc.png\";","module.exports = __webpack_public_path__ + \"static/media/amy.a6857bd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/charles.611412db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gina.8ebcbe06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/holt.9d20d394.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jake.63c8feba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rosa.1abcd606.jpg\";","module.exports = __webpack_public_path__ + \"static/media/terry.d49e04e1.jpg\";","import React from 'react';\nimport \"./Person.css\";\nimport AMY from \"./images/amy.jpg\";\nimport CHARLES from \"./images/charles.jpg\";\nimport GINA from \"./images/gina.jpg\";\nimport HOLT from \"./images/holt.jpg\";\nimport JAKE from \"./images/jake.jpg\";\nimport ROSA from \"./images/rosa.jpg\";\nimport TERRY from \"./images/terry.jpg\";\n\nconst person = {\n    \"AMY\": AMY,\n    \"CHARLES\": CHARLES,\n    \"GINA\": GINA,\n    \"HOLT\": HOLT,\n    \"JAKE\": JAKE,\n    \"ROSA\": ROSA,\n    \"TERRY\": TERRY\n}\n\nconst Reward = (props) => (\n\n        <div>\n            <img \n                className=\"personImg\"\n                src={person[props.targetName]}\n                alt={props.targetName}\n            />\n        </div>\n);\n\nexport default Reward;","import React from \"react\";\nimport logo from \"./images/b99_logo.png\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\n\n// moved it outside state\n// these do not change. do not need to be in state. state for things that change\nconst names = [\"JAKE\", \"AMY\", \"GINA\", \"ROSA\", \"CHARLES\", \"TERRY\", \"HOLT\"];\n\nclass App extends React.Component {\n\n  state = {\n    targetName: \"\",\n    targetNameDashes: \"\",\n    guessRemain: 10,\n    lettersGuessed: [],\n  };\n\n  // function extracted from componentDidMount\n  // so that it can be re-used later, rather than reloading entire component\n  resetGame = () => {\n    let targetName = names[Math.floor(Math.random() * names.length)];\n    console.log(targetName);\n    this.setState({\n      guessRemain: 10,\n      lettersGuessed: [],\n      targetName: targetName,\n      targetNameDashes: new Array(targetName.length).fill(\"-\").join(\"\") // create new array containing the letters in targetName. fill array with hyphens\n    });\n  };\n\n  componentDidMount() {\n    // call the function\n    this.resetGame();\n  }\n\n  onKeyUp = (event) => {\n    event.preventDefault();\n    let letter = event.key.toUpperCase();\n\n    // TODO: provide more logic to avoid bad key strokes\n    // for example backspace should not count\n\n    if (letter) {\n      this.setState(\n        prevState => {\n          let modifiedNameDashes = String(prevState.targetNameDashes);\n            // String allows location of substrings within strings\n\n          // for each character of targetName\n          for (var i = 0; i < prevState.targetName.length; i++) {\n            // check if this character at index i matched the key\n            if (prevState.targetName[i] === letter) {\n              // if it does\n              // remove a hyphen from modifiedNameDashes at that exact index\n              modifiedNameDashes = modifiedNameDashes.substr(0, i) + letter + modifiedNameDashes.substr(i + 1);\n            }\n          }\n          return {\n            targetNameDashes: modifiedNameDashes,\n            guessRemain: prevState.guessRemain - 1,\n            lettersGuessed: [...prevState.lettersGuessed, letter],\n          };\n        },\n        // callback after the state update is done\n        () => {\n          // won\n          if (this.state.targetNameDashes === this.state.targetName) {\n            console.log(\"Nice!\");\n          }\n        //   lost = reset\n          if (this.state.guessRemain === 0) {\n            this.resetGame();\n          }\n        }\n      );\n    }\n  };\n\n\n  render() {\n    return (\n        \n      <div className=\"parallax\">\n      \n        <div className=\"App\">\n\n            <div className=\"masterDiv\"> \n\n                <div className=\"logoDiv\">\n                    <img src={logo} alt=\"logo\" id=\"logo\"/>\n                </div>\n\n                <div className=\"introDiv\">\n                    You walk into the 99th Precinct and ask for help.\n                </div>\n\n                <div className=\"nameDiv\">\n                    The first person you meet is \n                    <br></br>\n                    {this.state.targetNameDashes}\n                </div>\n\n                <div className=\"guessedDiv\">\n                    Enter letters to guess their name:\n                    <br />\n                    <input onKeyUp={this.onKeyUp} value={this.state.lettersGuessed.join(\"\").toUpperCase()} />\n                </div>\n\n                <div className=\"remainDiv\">\n                    Guesses remaining:\n                    <br />\n                    {this.state.guessRemain}\n                    <br />\n                    <button onClick={this.resetGame}>Want to see someone else?</button>\n                </div>\n\n                {this.state.targetNameDashes === this.state.targetName &&\n                    <div className=\"resultDiv\">\n                    <hr />\n                    <Person \n                        targetName={this.state.targetName}\n                    />\n                </div>\n                }\n\n            </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}